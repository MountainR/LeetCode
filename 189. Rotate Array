189. Rotate Array

Solution 1: Circular Linked List
*  build a circle linked list class.
	*  a node class
	*  a head pointer and size
	*  an add method
*  Move the head for (len - 4)
*  update the value of num

class Solution {
    public void rotate(int[] nums, int k) {
        // *  build a circle linked list class.
	    // *  a node class
        // *  a head pointer and size
        // *  an add method
        CircularlyLinkedList CLL = new CircularlyLinkedList();
        for (int num : nums) {
            CLL.addNode(num);
            // System.out.println(CLL.tail.data);
        }
        CLL.tail.next = CLL.head;
        
        // *  Move the head for (len - k)
        // k can be greater than size. So use k mod size.
        // if k < size, k mod size = k
        int move=0;
        if (k <= CLL.size) move = CLL.size - k;
        else move = CLL.size - k % CLL.size;

        for (int i=0; i<move; ++i) {
            CLL.head = CLL.head.next;
            CLL.tail = CLL.tail.next;
        }
        // *  update the value of num
        Node curr = CLL.head;
        for (int i=0; i<CLL.size; ++i) {
            nums[i] = curr.data;
            curr = curr.next;
        }


    }
    class Node {
            int data;
            Node next;
            Node(int data, Node next) {
                this.data = data;
                this.next = next;
            }
        }
    class CircularlyLinkedList {
        Node head = null, tail = null;
        int size = 0;

        void addNode(int data) {
            // create the new node
            Node newNode = new Node(data, null);
            // check if size == 0, set head and tail to new node
            if (size == 0) {
                head = newNode;
                tail = newNode;
            }
            else {
            // else, add new node to tail, update tail
                tail.next = newNode;
                tail = newNode;
            }
            // update size
            ++size;
        }

        
    }
}

Solution 2: reverse for 3 times
* Rotate the whole array
	* 1234567 -> 7654321, k=3
* Rotate two subarrays
	* 7654321 -> 5671234

To rotate an array, I can switch the ith element with len-i th element. Until i = len / 2(do not contain len/2)
To rotate a subarray, I can set the len to the index I want to stop.
So basically, rotate array will get an array, start, end indexes and return an array.

class Solution {
    public void rotate(int[] nums, int k) {
        int length = nums.length;
        // deal with k == 0 and k >= length
        k = k % length; 
        if (k != 0) {
            // * reverse the whole array
            //    * 1234567 -> 7654321, k=3
            nums = reverse(nums, 0, length-1);
            //* reverse two subarrays
            //    * 7654321 -> 5671234
            nums = reverse(nums, 0, k-1);
            nums = reverse(nums, k, length-1);
        }
    }
    // 
    // To reverse an array, I can switch the ith element with len-i th element. Until i = len / 2(do not contain len/2)
    // To reverse a subarray, I can set the len to the index I want to stop.
    // So basically, reverse array will get an array, start, end indexes and return an array.
    public int[] reverse(int[] nums, int start, int end) {
        int mid = (end - start) / 2 + start;
        for (int i=start; i<=mid; ++i) {
            int temp = nums[i];
            nums[i] = nums[end-i+start];
            nums[end-i+start] = temp;
            
        }
        return nums;
    }

}
